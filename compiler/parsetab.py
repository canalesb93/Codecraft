
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORnonassoc<>LESS_EQGREATER_EQEQleft+-left*/%rightUMINUSNUMBER ID EQ LESS_EQ GREATER_EQ AND FUNCTION CHAR FALSE CONTINUE INT VOID FLOAT ELSE RETURN WHILE CRAFT BOOL BREAK OUTPUT VAR INPUT TRUE OR STRING IFprogram : CRAFT "{" vars block functions "}"vars : var vars\n            | emptyfunctions : function functions\n                 | emptyvar : VAR type assignmenttype : INT\n            | FLOAT\n            | CHAR\n            | BOOL\n            | STRINGassignment : ID "=" expression \',\' assignment\n                  | ID "=" expression  function : FUNCTION type ID "(" ")" "{" vars block "}"\n                 | FUNCTION type ID "(" parameters_definition ")" "{" vars block "}"\n                 | FUNCTION VOID ID "(" ")" "{" vars block "}"\n                 | FUNCTION VOID ID "(" parameters_definition ")" "{" vars block "}"parameters : expression\n                  | expression "," parametersparameters_definition : type\n                             | type "," parameters_definitionblock : assignment block\n             | if block\n             | cycle block\n             | return block\n             | BREAK block\n             | CONTINUE block\n             | function_call block\n             | emptyif : IF "(" expression ")" "{" block "}"\n          | IF "(" expression ")" "{" block "}" elseelse : ELSE if\n            | ELSE "{" block "}"cycle : WHILE "(" expression ")" "{" block "}"return : RETURN\n              | RETURN expressionfunction_call : ID "(" ")" \n                     | ID "(" parameters ")"expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'%\' expression\n                  | expression \'>\' expression\n                  | expression \'<\' expression\n                  | expression EQ expression\n                  | expression LESS_EQ expression\n                  | expression GREATER_EQ expression\n                  | expression AND expression\n                  | expression OR expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : NUMBERexpression : FALSE\n                  | TRUEexpression : IDempty :'
    
_lr_action_items = {'LESS_EQ':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,55,-55,-51,55,55,55,55,55,-52,55,None,None,-39,-41,-40,-42,55,None,-43,None,None,]),'RETURN':([3,4,6,7,8,9,11,12,14,15,18,19,27,29,30,32,33,34,50,52,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,96,98,99,109,110,112,114,116,119,120,121,122,123,124,126,128,134,],[-57,8,-3,-57,-35,8,8,8,8,8,8,8,-2,-53,-54,-56,-36,-55,-6,-51,-37,-13,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,8,-12,8,-34,-30,-57,-57,-31,8,-57,8,-57,8,-32,8,8,-33,]),'VOID':([47,],[73,]),'NUMBER':([8,28,31,36,41,42,43,54,55,56,57,58,59,60,61,62,63,64,65,91,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CHAR':([5,47,100,101,111,],[24,24,24,24,24,]),'GREATER_EQ':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,62,-55,-51,62,62,62,62,62,-52,62,None,None,-39,-41,-40,-42,62,None,-43,None,None,]),'WHILE':([3,4,6,7,8,9,11,12,14,15,18,19,27,29,30,32,33,34,50,52,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,96,98,99,109,110,112,114,116,119,120,121,122,123,124,126,128,134,],[-57,10,-3,-57,-35,10,10,10,10,10,10,10,-2,-53,-54,-56,-36,-55,-6,-51,-37,-13,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,10,-12,10,-34,-30,-57,-57,-31,10,-57,10,-57,10,-32,10,10,-33,]),'TRUE':([8,28,31,36,41,42,43,54,55,56,57,58,59,60,61,62,63,64,65,91,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'%':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,63,-55,-51,63,63,63,63,63,-52,63,63,63,63,-41,63,-42,63,63,-43,63,63,]),')':([21,22,23,24,25,29,30,32,34,41,52,53,66,67,69,71,76,77,78,79,80,81,82,83,84,85,86,87,88,97,100,101,104,106,108,118,],[-11,-7,-8,-9,-10,-53,-54,-56,-55,68,-51,76,89,90,-18,93,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-19,105,107,-20,113,115,-21,]),'(':([8,10,16,17,28,31,36,41,42,43,54,55,56,57,58,59,60,61,62,63,64,65,91,94,95,],[31,36,41,43,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,100,101,]),'+':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,57,-55,-51,57,57,57,57,57,-52,57,57,57,-39,-41,-40,-42,57,57,-43,57,57,]),'*':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,58,-55,-51,58,58,58,58,58,-52,58,58,58,58,-41,58,-42,58,58,-43,58,58,]),'-':([8,28,29,30,31,32,33,34,36,41,42,43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,91,],[28,28,-53,-54,28,-56,59,-55,28,28,28,28,-51,59,28,28,28,28,28,28,28,28,28,28,28,28,59,59,59,59,-52,59,59,59,-39,-41,-40,-42,59,59,-43,59,59,28,]),',':([21,22,23,24,25,29,30,32,34,52,69,70,76,77,78,79,80,81,82,83,84,85,86,87,88,104,],[-11,-7,-8,-9,-10,-53,-54,-56,-55,-51,91,92,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,111,]),'/':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,60,-55,-51,60,60,60,60,60,-52,60,60,60,60,-41,60,-42,60,60,-43,60,60,]),'CRAFT':([0,],[2,]),'=':([16,51,],[42,42,]),'<':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,64,-55,-51,64,64,64,64,64,-52,64,None,None,-39,-41,-40,-42,64,None,-43,None,None,]),'$end':([1,75,],[0,-1,]),'FUNCTION':([3,4,6,7,8,9,11,12,13,14,15,18,19,20,27,29,30,32,33,34,35,37,38,39,40,44,45,46,50,52,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,98,109,110,116,124,130,132,134,135,136,],[-57,-57,-3,-57,-35,-57,-57,-57,-29,-57,-57,-57,-57,47,-2,-53,-54,-56,-36,-55,-28,-23,-24,-25,-22,-26,-27,47,-6,-51,-37,-13,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,-12,-34,-30,-31,-32,-16,-14,-33,-17,-15,]),'STRING':([5,47,100,101,111,],[21,21,21,21,21,]),'ELSE':([110,],[117,]),'VAR':([3,7,29,30,32,34,50,52,70,76,77,78,79,80,81,82,83,84,85,86,87,88,98,112,114,120,122,],[5,5,-53,-54,-56,-55,-6,-51,-13,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-12,5,5,5,5,]),'EQ':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,56,-55,-51,56,56,56,56,56,-52,56,None,None,-39,-41,-40,-42,56,None,-43,None,None,]),'ID':([3,4,6,7,8,9,11,12,14,15,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,41,42,43,50,52,54,55,56,57,58,59,60,61,62,63,64,65,68,70,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,96,98,99,109,110,112,114,116,119,120,121,122,123,124,126,128,134,],[-57,16,-3,-57,32,16,16,16,16,16,16,16,-11,-7,-8,-9,-10,51,-2,32,-53,-54,32,-56,-36,-55,32,32,32,32,-6,-51,32,32,32,32,32,32,32,32,32,32,32,32,-37,-13,94,95,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,32,51,16,-12,16,-34,-30,-57,-57,-31,16,-57,16,-57,16,-32,16,16,-33,]),'IF':([3,4,6,7,8,9,11,12,14,15,18,19,27,29,30,32,33,34,50,52,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,96,98,99,109,110,112,114,116,117,119,120,121,122,123,124,126,128,134,],[-57,17,-3,-57,-35,17,17,17,17,17,17,17,-2,-53,-54,-56,-36,-55,-6,-51,-37,-13,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,17,-12,17,-34,-30,-57,-57,-31,17,17,-57,17,-57,17,-32,17,17,-33,]),'AND':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,54,-55,-51,54,54,54,54,54,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,]),'FALSE':([8,28,31,36,41,42,43,54,55,56,57,58,59,60,61,62,63,64,65,91,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'INT':([5,47,100,101,111,],[22,22,22,22,22,]),'FLOAT':([5,47,100,101,111,],[23,23,23,23,23,]),'BREAK':([3,4,6,7,8,9,11,12,14,15,18,19,27,29,30,32,33,34,50,52,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,96,98,99,109,110,112,114,116,119,120,121,122,123,124,126,128,134,],[-57,18,-3,-57,-35,18,18,18,18,18,18,18,-2,-53,-54,-56,-36,-55,-6,-51,-37,-13,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,18,-12,18,-34,-30,-57,-57,-31,18,-57,18,-57,18,-32,18,18,-33,]),'CONTINUE':([3,4,6,7,8,9,11,12,14,15,18,19,27,29,30,32,33,34,50,52,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,96,98,99,109,110,112,114,116,119,120,121,122,123,124,126,128,134,],[-57,19,-3,-57,-35,19,19,19,19,19,19,19,-2,-53,-54,-56,-36,-55,-6,-51,-37,-13,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,19,-12,19,-34,-30,-57,-57,-31,19,-57,19,-57,19,-32,19,19,-33,]),'BOOL':([5,47,100,101,111,],[25,25,25,25,25,]),'{':([2,89,93,105,107,113,115,117,],[3,96,99,112,114,120,122,123,]),'>':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,65,-55,-51,65,65,65,65,65,-52,65,None,None,-39,-41,-40,-42,65,None,-43,None,None,]),'}':([3,4,6,7,8,9,11,12,13,14,15,18,19,20,27,29,30,32,33,34,35,37,38,39,40,44,45,46,48,49,50,52,68,70,72,76,77,78,79,80,81,82,83,84,85,86,87,88,90,96,98,99,102,103,109,110,112,114,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,],[-57,-57,-3,-57,-35,-57,-57,-57,-29,-57,-57,-57,-57,-57,-2,-53,-54,-56,-36,-55,-28,-23,-24,-25,-22,-26,-27,-57,75,-5,-6,-51,-37,-13,-4,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,-38,-57,-12,-57,109,110,-34,-30,-57,-57,-31,-57,-57,-57,-57,-57,-32,130,-57,132,-57,134,-16,135,-14,136,-33,-17,-15,]),'OR':([29,30,32,33,34,52,53,66,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,],[-53,-54,-56,61,-55,-51,61,61,61,61,61,-52,-49,-47,-46,-39,-41,-40,-42,-50,-48,-43,-45,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([20,46,],[46,46,]),'functions':([20,46,],[48,72,]),'return':([4,9,11,12,14,15,18,19,96,99,119,121,123,126,128,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'parameters':([41,91,],[67,97,]),'vars':([3,7,112,114,120,122,],[4,27,119,121,126,128,]),'assignment':([4,9,11,12,14,15,18,19,26,92,96,99,119,121,123,126,128,],[15,15,15,15,15,15,15,15,50,98,15,15,15,15,15,15,15,]),'expression':([8,28,31,36,41,42,43,54,55,56,57,58,59,60,61,62,63,64,65,91,],[33,52,53,66,69,70,71,77,78,79,80,81,82,83,84,85,86,87,88,69,]),'function_call':([4,9,11,12,14,15,18,19,96,99,119,121,123,126,128,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'else':([110,],[116,]),'program':([0,],[1,]),'block':([4,9,11,12,14,15,18,19,96,99,119,121,123,126,128,],[20,35,37,38,39,40,44,45,102,103,125,127,129,131,133,]),'parameters_definition':([100,101,111,],[106,108,118,]),'var':([3,7,112,114,120,122,],[7,7,7,7,7,7,]),'if':([4,9,11,12,14,15,18,19,96,99,117,119,121,123,126,128,],[11,11,11,11,11,11,11,11,11,11,124,11,11,11,11,11,]),'type':([5,47,100,101,111,],[26,74,104,104,104,]),'empty':([3,4,7,9,11,12,14,15,18,19,20,46,96,99,112,114,119,120,121,122,123,126,128,],[6,13,6,13,13,13,13,13,13,13,49,49,13,13,6,6,13,6,13,6,13,13,13,]),'cycle':([4,9,11,12,14,15,18,19,96,99,119,121,123,126,128,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> CRAFT { vars block functions }','program',6,'p_program','parser.py',33),
  ('vars -> var vars','vars',2,'p_vars','parser.py',38),
  ('vars -> empty','vars',1,'p_vars','parser.py',39),
  ('functions -> function functions','functions',2,'p_functions','parser.py',44),
  ('functions -> empty','functions',1,'p_functions','parser.py',45),
  ('var -> VAR type assignment','var',3,'p_var','parser.py',50),
  ('type -> INT','type',1,'p_type','parser.py',55),
  ('type -> FLOAT','type',1,'p_type','parser.py',56),
  ('type -> CHAR','type',1,'p_type','parser.py',57),
  ('type -> BOOL','type',1,'p_type','parser.py',58),
  ('type -> STRING','type',1,'p_type','parser.py',59),
  ('assignment -> ID = expression , assignment','assignment',5,'p_assignment','parser.py',64),
  ('assignment -> ID = expression','assignment',3,'p_assignment','parser.py',65),
  ('function -> FUNCTION type ID ( ) { vars block }','function',9,'p_function','parser.py',72),
  ('function -> FUNCTION type ID ( parameters_definition ) { vars block }','function',10,'p_function','parser.py',73),
  ('function -> FUNCTION VOID ID ( ) { vars block }','function',9,'p_function','parser.py',74),
  ('function -> FUNCTION VOID ID ( parameters_definition ) { vars block }','function',10,'p_function','parser.py',75),
  ('parameters -> expression','parameters',1,'p_parameters','parser.py',79),
  ('parameters -> expression , parameters','parameters',3,'p_parameters','parser.py',80),
  ('parameters_definition -> type','parameters_definition',1,'p_parameters_definition','parser.py',85),
  ('parameters_definition -> type , parameters_definition','parameters_definition',3,'p_parameters_definition','parser.py',86),
  ('block -> assignment block','block',2,'p_block','parser.py',90),
  ('block -> if block','block',2,'p_block','parser.py',91),
  ('block -> cycle block','block',2,'p_block','parser.py',92),
  ('block -> return block','block',2,'p_block','parser.py',93),
  ('block -> BREAK block','block',2,'p_block','parser.py',94),
  ('block -> CONTINUE block','block',2,'p_block','parser.py',95),
  ('block -> function_call block','block',2,'p_block','parser.py',96),
  ('block -> empty','block',1,'p_block','parser.py',97),
  ('if -> IF ( expression ) { block }','if',7,'p_if','parser.py',102),
  ('if -> IF ( expression ) { block } else','if',8,'p_if','parser.py',103),
  ('else -> ELSE if','else',2,'p_else','parser.py',108),
  ('else -> ELSE { block }','else',4,'p_else','parser.py',109),
  ('cycle -> WHILE ( expression ) { block }','cycle',7,'p_cycle','parser.py',113),
  ('return -> RETURN','return',1,'p_return','parser.py',118),
  ('return -> RETURN expression','return',2,'p_return','parser.py',119),
  ('function_call -> ID ( )','function_call',3,'p_function_call','parser.py',124),
  ('function_call -> ID ( parameters )','function_call',4,'p_function_call','parser.py',125),
  ('expression -> expression + expression','expression',3,'p_expression_binop','parser.py',140),
  ('expression -> expression - expression','expression',3,'p_expression_binop','parser.py',141),
  ('expression -> expression * expression','expression',3,'p_expression_binop','parser.py',142),
  ('expression -> expression / expression','expression',3,'p_expression_binop','parser.py',143),
  ('expression -> expression % expression','expression',3,'p_expression_binop','parser.py',144),
  ('expression -> expression > expression','expression',3,'p_expression_binop','parser.py',145),
  ('expression -> expression < expression','expression',3,'p_expression_binop','parser.py',146),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',147),
  ('expression -> expression LESS_EQ expression','expression',3,'p_expression_binop','parser.py',148),
  ('expression -> expression GREATER_EQ expression','expression',3,'p_expression_binop','parser.py',149),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',150),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',151),
  ('expression -> - expression','expression',2,'p_expression_uminus','parser.py',179),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',184),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',189),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',194),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',195),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',203),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',212),
]
