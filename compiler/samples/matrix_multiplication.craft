craft {
  var int a[5][5], b[5][5], c[5][5]
  # First Matrix col/row
  var int m = 4, n = 4
  # Second Matrix col/row
  var int p = 4, q = 4

  function void generateAndPrintMatrixA() {
    var int i = 0, j = 0

    while (i < m) {
      while(j < n) {
        a[i][j] = i * j
        j = j + 1
      }
      j = 0
      i = i + 1 
    }

    i = 0
    j = 0
    while (i < m) {
      while(j < n) {
        output(a[i][j], " ")
        j = j + 1
      }
      j = 0
      i = i + 1 
      outputln(" ")
    }
  }

  function void generateAndPrintMatrixB() {
    var int i = 0, j = 0

    while (i < p) {
      while(j < q) {
        b[i][j] = i + j
        j = j + 1
      }
      j = 0
      i = i + 1 
    }

    i = 0
    j = 0
    while (i < p) {
      while(j < q) {
        output(b[i][j], " ")
        j = j + 1
      }
      j = 0
      i = i + 1 
      outputln(" ")
    }
  }

  generateAndPrintMatrixA()
  outputln("")
  generateAndPrintMatrixB()
  outputln("1")

  function void mutliplyAB() {
    if (n != p) {
      outputln("\nMatrixs can't be multipled")
      return
    }

    var int i = 0, j, k
    while (i < m) {
      j = 0
      while (j < q) {
        k = 0
        c[i][j] = 0
        while (k < n) {
          c[i][j] = c[i][j] + (a[i][k] * b[k][j])
          k = k + 1
        }
        output(c[i][j], " ")
        j = j + 1
      }
      outputln("")
      i = i + 1
    }
  }

  mutliplyAB()

}