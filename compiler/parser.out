Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    INPUT
    OUTPUT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM { vars block functions }
Rule 2     vars -> var vars
Rule 3     vars -> empty
Rule 4     functions -> function functions
Rule 5     functions -> empty
Rule 6     var -> VAR type assignment
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     type -> CHAR
Rule 10    type -> BOOL
Rule 11    type -> STRING
Rule 12    assignment -> ID = expression , assignment
Rule 13    assignment -> ID = expression
Rule 14    function -> FUNCTION type ID ( ) { vars block }
Rule 15    function -> FUNCTION type ID ( parameters_definition ) { vars block }
Rule 16    function -> FUNCTION VOID ID ( ) { vars block }
Rule 17    function -> FUNCTION VOID ID ( parameters_definition ) { vars block }
Rule 18    parameters -> expression
Rule 19    parameters -> expression , parameters
Rule 20    parameters_definition -> type
Rule 21    parameters_definition -> type , parameters_definition
Rule 22    block -> assignment block
Rule 23    block -> if block
Rule 24    block -> cycle block
Rule 25    block -> return block
Rule 26    block -> BREAK block
Rule 27    block -> CONTINUE block
Rule 28    block -> function_call block
Rule 29    block -> empty
Rule 30    if -> IF ( expression ) { block }
Rule 31    if -> IF ( expression ) { block } else
Rule 32    else -> ELSE if
Rule 33    else -> ELSE { block }
Rule 34    cycle -> WHILE ( expression ) { block }
Rule 35    return -> RETURN
Rule 36    return -> RETURN expression
Rule 37    function_call -> ID ( )
Rule 38    function_call -> ID ( parameters )
Rule 39    expression -> expression + expression
Rule 40    expression -> expression - expression
Rule 41    expression -> expression * expression
Rule 42    expression -> expression / expression
Rule 43    expression -> expression % expression
Rule 44    expression -> expression > expression
Rule 45    expression -> expression < expression
Rule 46    expression -> expression EQ expression
Rule 47    expression -> expression LESS_EQ expression
Rule 48    expression -> expression GREATER_EQ expression
Rule 49    expression -> expression AND expression
Rule 50    expression -> expression OR expression
Rule 51    expression -> - expression
Rule 52    expression -> ( expression )
Rule 53    expression -> NUMBER
Rule 54    expression -> FALSE
Rule 55    expression -> TRUE
Rule 56    expression -> ID
Rule 57    empty -> <empty>

Terminals, with rules where they appear

%                    : 43
(                    : 14 15 16 17 30 31 34 37 38 52
)                    : 14 15 16 17 30 31 34 37 38 52
*                    : 41
+                    : 39
,                    : 12 19 21
-                    : 40 51
/                    : 42
<                    : 45
=                    : 12 13
>                    : 44
AND                  : 49
BOOL                 : 10
BREAK                : 26
CHAR                 : 9
CONTINUE             : 27
ELSE                 : 32 33
EQ                   : 46
FALSE                : 54
FLOAT                : 8
FUNCTION             : 14 15 16 17
GREATER_EQ           : 48
ID                   : 12 13 14 15 16 17 37 38 56
IF                   : 30 31
INPUT                : 
INT                  : 7
LESS_EQ              : 47
NUMBER               : 53
OR                   : 50
OUTPUT               : 
PROGRAM              : 1
RETURN               : 35 36
STRING               : 11
TRUE                 : 55
VAR                  : 6
VOID                 : 16 17
WHILE                : 34
error                : 
{                    : 1 14 15 16 17 30 31 33 34
}                    : 1 14 15 16 17 30 31 33 34

Nonterminals, with rules where they appear

assignment           : 6 12 22
block                : 1 14 15 16 17 22 23 24 25 26 27 28 30 31 33 34
cycle                : 24
else                 : 31
empty                : 3 5 29
expression           : 12 13 18 19 30 31 34 36 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 52
function             : 4
function_call        : 28
functions            : 1 4
if                   : 23 32
parameters           : 19 38
parameters_definition : 15 17 21
program              : 0
return               : 25
type                 : 6 14 15 20 21
var                  : 2
vars                 : 1 2 14 15 16 17

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM { vars block functions }

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . { vars block functions }

    {               shift and go to state 3


state 3

    (1) program -> PROGRAM { . vars block functions }
    (2) vars -> . var vars
    (3) vars -> . empty
    (6) var -> . VAR type assignment
    (57) empty -> .

    VAR             shift and go to state 5
    BREAK           reduce using rule 57 (empty -> .)
    CONTINUE        reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    IF              reduce using rule 57 (empty -> .)
    WHILE           reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    vars                           shift and go to state 4
    var                            shift and go to state 7
    empty                          shift and go to state 6

state 4

    (1) program -> PROGRAM { vars . block functions }
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 20
    cycle                          shift and go to state 12

state 5

    (6) var -> VAR . type assignment
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . CHAR
    (10) type -> . BOOL
    (11) type -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 21

    type                           shift and go to state 26

state 6

    (3) vars -> empty .

    BREAK           reduce using rule 3 (vars -> empty .)
    CONTINUE        reduce using rule 3 (vars -> empty .)
    ID              reduce using rule 3 (vars -> empty .)
    IF              reduce using rule 3 (vars -> empty .)
    WHILE           reduce using rule 3 (vars -> empty .)
    RETURN          reduce using rule 3 (vars -> empty .)
    FUNCTION        reduce using rule 3 (vars -> empty .)
    }               reduce using rule 3 (vars -> empty .)


state 7

    (2) vars -> var . vars
    (2) vars -> . var vars
    (3) vars -> . empty
    (6) var -> . VAR type assignment
    (57) empty -> .

    VAR             shift and go to state 5
    BREAK           reduce using rule 57 (empty -> .)
    CONTINUE        reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    IF              reduce using rule 57 (empty -> .)
    WHILE           reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    var                            shift and go to state 7
    empty                          shift and go to state 6
    vars                           shift and go to state 27

state 8

    (35) return -> RETURN .
    (36) return -> RETURN . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

  ! shift/reduce conflict for ID resolved as shift
    BREAK           reduce using rule 35 (return -> RETURN .)
    CONTINUE        reduce using rule 35 (return -> RETURN .)
    IF              reduce using rule 35 (return -> RETURN .)
    WHILE           reduce using rule 35 (return -> RETURN .)
    RETURN          reduce using rule 35 (return -> RETURN .)
    FUNCTION        reduce using rule 35 (return -> RETURN .)
    }               reduce using rule 35 (return -> RETURN .)
    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

  ! ID              [ reduce using rule 35 (return -> RETURN .) ]

    expression                     shift and go to state 33

state 9

    (28) block -> function_call . block
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 35
    cycle                          shift and go to state 12

state 10

    (34) cycle -> WHILE . ( expression ) { block }

    (               shift and go to state 36


state 11

    (23) block -> if . block
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 37
    cycle                          shift and go to state 12

state 12

    (24) block -> cycle . block
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    cycle                          shift and go to state 12
    block                          shift and go to state 38
    if                             shift and go to state 11

state 13

    (29) block -> empty .

    FUNCTION        reduce using rule 29 (block -> empty .)
    }               reduce using rule 29 (block -> empty .)


state 14

    (25) block -> return . block
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 39
    cycle                          shift and go to state 12

state 15

    (22) block -> assignment . block
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 40
    cycle                          shift and go to state 12

state 16

    (12) assignment -> ID . = expression , assignment
    (13) assignment -> ID . = expression
    (37) function_call -> ID . ( )
    (38) function_call -> ID . ( parameters )

    =               shift and go to state 42
    (               shift and go to state 41


state 17

    (30) if -> IF . ( expression ) { block }
    (31) if -> IF . ( expression ) { block } else

    (               shift and go to state 43


state 18

    (26) block -> BREAK . block
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 44
    cycle                          shift and go to state 12

state 19

    (27) block -> CONTINUE . block
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    FUNCTION        reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 45
    cycle                          shift and go to state 12

state 20

    (1) program -> PROGRAM { vars block . functions }
    (4) functions -> . function functions
    (5) functions -> . empty
    (14) function -> . FUNCTION type ID ( ) { vars block }
    (15) function -> . FUNCTION type ID ( parameters_definition ) { vars block }
    (16) function -> . FUNCTION VOID ID ( ) { vars block }
    (17) function -> . FUNCTION VOID ID ( parameters_definition ) { vars block }
    (57) empty -> .

    FUNCTION        shift and go to state 47
    }               reduce using rule 57 (empty -> .)

    function                       shift and go to state 46
    functions                      shift and go to state 48
    empty                          shift and go to state 49

state 21

    (11) type -> STRING .

    ID              reduce using rule 11 (type -> STRING .)
    ,               reduce using rule 11 (type -> STRING .)
    )               reduce using rule 11 (type -> STRING .)


state 22

    (7) type -> INT .

    ID              reduce using rule 7 (type -> INT .)
    ,               reduce using rule 7 (type -> INT .)
    )               reduce using rule 7 (type -> INT .)


state 23

    (8) type -> FLOAT .

    ID              reduce using rule 8 (type -> FLOAT .)
    ,               reduce using rule 8 (type -> FLOAT .)
    )               reduce using rule 8 (type -> FLOAT .)


state 24

    (9) type -> CHAR .

    ID              reduce using rule 9 (type -> CHAR .)
    ,               reduce using rule 9 (type -> CHAR .)
    )               reduce using rule 9 (type -> CHAR .)


state 25

    (10) type -> BOOL .

    ID              reduce using rule 10 (type -> BOOL .)
    ,               reduce using rule 10 (type -> BOOL .)
    )               reduce using rule 10 (type -> BOOL .)


state 26

    (6) var -> VAR type . assignment
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression

    ID              shift and go to state 51

    assignment                     shift and go to state 50

state 27

    (2) vars -> var vars .

    BREAK           reduce using rule 2 (vars -> var vars .)
    CONTINUE        reduce using rule 2 (vars -> var vars .)
    ID              reduce using rule 2 (vars -> var vars .)
    IF              reduce using rule 2 (vars -> var vars .)
    WHILE           reduce using rule 2 (vars -> var vars .)
    RETURN          reduce using rule 2 (vars -> var vars .)
    FUNCTION        reduce using rule 2 (vars -> var vars .)
    }               reduce using rule 2 (vars -> var vars .)


state 28

    (51) expression -> - . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 52

state 29

    (53) expression -> NUMBER .

    +               reduce using rule 53 (expression -> NUMBER .)
    -               reduce using rule 53 (expression -> NUMBER .)
    *               reduce using rule 53 (expression -> NUMBER .)
    /               reduce using rule 53 (expression -> NUMBER .)
    %               reduce using rule 53 (expression -> NUMBER .)
    >               reduce using rule 53 (expression -> NUMBER .)
    <               reduce using rule 53 (expression -> NUMBER .)
    EQ              reduce using rule 53 (expression -> NUMBER .)
    LESS_EQ         reduce using rule 53 (expression -> NUMBER .)
    GREATER_EQ      reduce using rule 53 (expression -> NUMBER .)
    AND             reduce using rule 53 (expression -> NUMBER .)
    OR              reduce using rule 53 (expression -> NUMBER .)
    BREAK           reduce using rule 53 (expression -> NUMBER .)
    CONTINUE        reduce using rule 53 (expression -> NUMBER .)
    ID              reduce using rule 53 (expression -> NUMBER .)
    IF              reduce using rule 53 (expression -> NUMBER .)
    WHILE           reduce using rule 53 (expression -> NUMBER .)
    RETURN          reduce using rule 53 (expression -> NUMBER .)
    FUNCTION        reduce using rule 53 (expression -> NUMBER .)
    }               reduce using rule 53 (expression -> NUMBER .)
    )               reduce using rule 53 (expression -> NUMBER .)
    ,               reduce using rule 53 (expression -> NUMBER .)
    VAR             reduce using rule 53 (expression -> NUMBER .)


state 30

    (55) expression -> TRUE .

    +               reduce using rule 55 (expression -> TRUE .)
    -               reduce using rule 55 (expression -> TRUE .)
    *               reduce using rule 55 (expression -> TRUE .)
    /               reduce using rule 55 (expression -> TRUE .)
    %               reduce using rule 55 (expression -> TRUE .)
    >               reduce using rule 55 (expression -> TRUE .)
    <               reduce using rule 55 (expression -> TRUE .)
    EQ              reduce using rule 55 (expression -> TRUE .)
    LESS_EQ         reduce using rule 55 (expression -> TRUE .)
    GREATER_EQ      reduce using rule 55 (expression -> TRUE .)
    AND             reduce using rule 55 (expression -> TRUE .)
    OR              reduce using rule 55 (expression -> TRUE .)
    BREAK           reduce using rule 55 (expression -> TRUE .)
    CONTINUE        reduce using rule 55 (expression -> TRUE .)
    ID              reduce using rule 55 (expression -> TRUE .)
    IF              reduce using rule 55 (expression -> TRUE .)
    WHILE           reduce using rule 55 (expression -> TRUE .)
    RETURN          reduce using rule 55 (expression -> TRUE .)
    FUNCTION        reduce using rule 55 (expression -> TRUE .)
    }               reduce using rule 55 (expression -> TRUE .)
    )               reduce using rule 55 (expression -> TRUE .)
    ,               reduce using rule 55 (expression -> TRUE .)
    VAR             reduce using rule 55 (expression -> TRUE .)


state 31

    (52) expression -> ( . expression )
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 53

state 32

    (56) expression -> ID .

    +               reduce using rule 56 (expression -> ID .)
    -               reduce using rule 56 (expression -> ID .)
    *               reduce using rule 56 (expression -> ID .)
    /               reduce using rule 56 (expression -> ID .)
    %               reduce using rule 56 (expression -> ID .)
    >               reduce using rule 56 (expression -> ID .)
    <               reduce using rule 56 (expression -> ID .)
    EQ              reduce using rule 56 (expression -> ID .)
    LESS_EQ         reduce using rule 56 (expression -> ID .)
    GREATER_EQ      reduce using rule 56 (expression -> ID .)
    AND             reduce using rule 56 (expression -> ID .)
    OR              reduce using rule 56 (expression -> ID .)
    BREAK           reduce using rule 56 (expression -> ID .)
    CONTINUE        reduce using rule 56 (expression -> ID .)
    ID              reduce using rule 56 (expression -> ID .)
    IF              reduce using rule 56 (expression -> ID .)
    WHILE           reduce using rule 56 (expression -> ID .)
    RETURN          reduce using rule 56 (expression -> ID .)
    FUNCTION        reduce using rule 56 (expression -> ID .)
    }               reduce using rule 56 (expression -> ID .)
    )               reduce using rule 56 (expression -> ID .)
    ,               reduce using rule 56 (expression -> ID .)
    VAR             reduce using rule 56 (expression -> ID .)


state 33

    (36) return -> RETURN expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    BREAK           reduce using rule 36 (return -> RETURN expression .)
    CONTINUE        reduce using rule 36 (return -> RETURN expression .)
    ID              reduce using rule 36 (return -> RETURN expression .)
    IF              reduce using rule 36 (return -> RETURN expression .)
    WHILE           reduce using rule 36 (return -> RETURN expression .)
    RETURN          reduce using rule 36 (return -> RETURN expression .)
    FUNCTION        reduce using rule 36 (return -> RETURN expression .)
    }               reduce using rule 36 (return -> RETURN expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62
    AND             shift and go to state 54
    OR              shift and go to state 61


state 34

    (54) expression -> FALSE .

    +               reduce using rule 54 (expression -> FALSE .)
    -               reduce using rule 54 (expression -> FALSE .)
    *               reduce using rule 54 (expression -> FALSE .)
    /               reduce using rule 54 (expression -> FALSE .)
    %               reduce using rule 54 (expression -> FALSE .)
    >               reduce using rule 54 (expression -> FALSE .)
    <               reduce using rule 54 (expression -> FALSE .)
    EQ              reduce using rule 54 (expression -> FALSE .)
    LESS_EQ         reduce using rule 54 (expression -> FALSE .)
    GREATER_EQ      reduce using rule 54 (expression -> FALSE .)
    AND             reduce using rule 54 (expression -> FALSE .)
    OR              reduce using rule 54 (expression -> FALSE .)
    BREAK           reduce using rule 54 (expression -> FALSE .)
    CONTINUE        reduce using rule 54 (expression -> FALSE .)
    ID              reduce using rule 54 (expression -> FALSE .)
    IF              reduce using rule 54 (expression -> FALSE .)
    WHILE           reduce using rule 54 (expression -> FALSE .)
    RETURN          reduce using rule 54 (expression -> FALSE .)
    FUNCTION        reduce using rule 54 (expression -> FALSE .)
    }               reduce using rule 54 (expression -> FALSE .)
    )               reduce using rule 54 (expression -> FALSE .)
    ,               reduce using rule 54 (expression -> FALSE .)
    VAR             reduce using rule 54 (expression -> FALSE .)


state 35

    (28) block -> function_call block .

    FUNCTION        reduce using rule 28 (block -> function_call block .)
    }               reduce using rule 28 (block -> function_call block .)


state 36

    (34) cycle -> WHILE ( . expression ) { block }
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 66

state 37

    (23) block -> if block .

    FUNCTION        reduce using rule 23 (block -> if block .)
    }               reduce using rule 23 (block -> if block .)


state 38

    (24) block -> cycle block .

    FUNCTION        reduce using rule 24 (block -> cycle block .)
    }               reduce using rule 24 (block -> cycle block .)


state 39

    (25) block -> return block .

    FUNCTION        reduce using rule 25 (block -> return block .)
    }               reduce using rule 25 (block -> return block .)


state 40

    (22) block -> assignment block .

    FUNCTION        reduce using rule 22 (block -> assignment block .)
    }               reduce using rule 22 (block -> assignment block .)


state 41

    (37) function_call -> ID ( . )
    (38) function_call -> ID ( . parameters )
    (18) parameters -> . expression
    (19) parameters -> . expression , parameters
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    )               shift and go to state 68
    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 69
    parameters                     shift and go to state 67

state 42

    (12) assignment -> ID = . expression , assignment
    (13) assignment -> ID = . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 70

state 43

    (30) if -> IF ( . expression ) { block }
    (31) if -> IF ( . expression ) { block } else
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 71

state 44

    (26) block -> BREAK block .

    FUNCTION        reduce using rule 26 (block -> BREAK block .)
    }               reduce using rule 26 (block -> BREAK block .)


state 45

    (27) block -> CONTINUE block .

    FUNCTION        reduce using rule 27 (block -> CONTINUE block .)
    }               reduce using rule 27 (block -> CONTINUE block .)


state 46

    (4) functions -> function . functions
    (4) functions -> . function functions
    (5) functions -> . empty
    (14) function -> . FUNCTION type ID ( ) { vars block }
    (15) function -> . FUNCTION type ID ( parameters_definition ) { vars block }
    (16) function -> . FUNCTION VOID ID ( ) { vars block }
    (17) function -> . FUNCTION VOID ID ( parameters_definition ) { vars block }
    (57) empty -> .

    FUNCTION        shift and go to state 47
    }               reduce using rule 57 (empty -> .)

    function                       shift and go to state 46
    functions                      shift and go to state 72
    empty                          shift and go to state 49

state 47

    (14) function -> FUNCTION . type ID ( ) { vars block }
    (15) function -> FUNCTION . type ID ( parameters_definition ) { vars block }
    (16) function -> FUNCTION . VOID ID ( ) { vars block }
    (17) function -> FUNCTION . VOID ID ( parameters_definition ) { vars block }
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . CHAR
    (10) type -> . BOOL
    (11) type -> . STRING

    VOID            shift and go to state 73
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 21

    type                           shift and go to state 74

state 48

    (1) program -> PROGRAM { vars block functions . }

    }               shift and go to state 75


state 49

    (5) functions -> empty .

    }               reduce using rule 5 (functions -> empty .)


state 50

    (6) var -> VAR type assignment .

    VAR             reduce using rule 6 (var -> VAR type assignment .)
    BREAK           reduce using rule 6 (var -> VAR type assignment .)
    CONTINUE        reduce using rule 6 (var -> VAR type assignment .)
    ID              reduce using rule 6 (var -> VAR type assignment .)
    IF              reduce using rule 6 (var -> VAR type assignment .)
    WHILE           reduce using rule 6 (var -> VAR type assignment .)
    RETURN          reduce using rule 6 (var -> VAR type assignment .)
    FUNCTION        reduce using rule 6 (var -> VAR type assignment .)
    }               reduce using rule 6 (var -> VAR type assignment .)


state 51

    (12) assignment -> ID . = expression , assignment
    (13) assignment -> ID . = expression

    =               shift and go to state 42


state 52

    (51) expression -> - expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    +               reduce using rule 51 (expression -> - expression .)
    -               reduce using rule 51 (expression -> - expression .)
    *               reduce using rule 51 (expression -> - expression .)
    /               reduce using rule 51 (expression -> - expression .)
    %               reduce using rule 51 (expression -> - expression .)
    >               reduce using rule 51 (expression -> - expression .)
    <               reduce using rule 51 (expression -> - expression .)
    EQ              reduce using rule 51 (expression -> - expression .)
    LESS_EQ         reduce using rule 51 (expression -> - expression .)
    GREATER_EQ      reduce using rule 51 (expression -> - expression .)
    AND             reduce using rule 51 (expression -> - expression .)
    OR              reduce using rule 51 (expression -> - expression .)
    BREAK           reduce using rule 51 (expression -> - expression .)
    CONTINUE        reduce using rule 51 (expression -> - expression .)
    ID              reduce using rule 51 (expression -> - expression .)
    IF              reduce using rule 51 (expression -> - expression .)
    WHILE           reduce using rule 51 (expression -> - expression .)
    RETURN          reduce using rule 51 (expression -> - expression .)
    FUNCTION        reduce using rule 51 (expression -> - expression .)
    }               reduce using rule 51 (expression -> - expression .)
    )               reduce using rule 51 (expression -> - expression .)
    ,               reduce using rule 51 (expression -> - expression .)
    VAR             reduce using rule 51 (expression -> - expression .)

  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 63 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 53

    (52) expression -> ( expression . )
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    )               shift and go to state 76
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62
    AND             shift and go to state 54
    OR              shift and go to state 61


state 54

    (49) expression -> expression AND . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 77

state 55

    (47) expression -> expression LESS_EQ . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 78

state 56

    (46) expression -> expression EQ . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 79

state 57

    (39) expression -> expression + . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 80

state 58

    (41) expression -> expression * . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 81

state 59

    (40) expression -> expression - . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 82

state 60

    (42) expression -> expression / . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 83

state 61

    (50) expression -> expression OR . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 84

state 62

    (48) expression -> expression GREATER_EQ . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 85

state 63

    (43) expression -> expression % . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 86

state 64

    (45) expression -> expression < . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 87

state 65

    (44) expression -> expression > . expression
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 88

state 66

    (34) cycle -> WHILE ( expression . ) { block }
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    )               shift and go to state 89
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62
    AND             shift and go to state 54
    OR              shift and go to state 61


state 67

    (38) function_call -> ID ( parameters . )

    )               shift and go to state 90


state 68

    (37) function_call -> ID ( ) .

    BREAK           reduce using rule 37 (function_call -> ID ( ) .)
    CONTINUE        reduce using rule 37 (function_call -> ID ( ) .)
    ID              reduce using rule 37 (function_call -> ID ( ) .)
    IF              reduce using rule 37 (function_call -> ID ( ) .)
    WHILE           reduce using rule 37 (function_call -> ID ( ) .)
    RETURN          reduce using rule 37 (function_call -> ID ( ) .)
    FUNCTION        reduce using rule 37 (function_call -> ID ( ) .)
    }               reduce using rule 37 (function_call -> ID ( ) .)


state 69

    (18) parameters -> expression .
    (19) parameters -> expression . , parameters
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    )               reduce using rule 18 (parameters -> expression .)
    ,               shift and go to state 91
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62
    AND             shift and go to state 54
    OR              shift and go to state 61


state 70

    (12) assignment -> ID = expression . , assignment
    (13) assignment -> ID = expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    ,               shift and go to state 92
    BREAK           reduce using rule 13 (assignment -> ID = expression .)
    CONTINUE        reduce using rule 13 (assignment -> ID = expression .)
    ID              reduce using rule 13 (assignment -> ID = expression .)
    IF              reduce using rule 13 (assignment -> ID = expression .)
    WHILE           reduce using rule 13 (assignment -> ID = expression .)
    RETURN          reduce using rule 13 (assignment -> ID = expression .)
    FUNCTION        reduce using rule 13 (assignment -> ID = expression .)
    }               reduce using rule 13 (assignment -> ID = expression .)
    VAR             reduce using rule 13 (assignment -> ID = expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62
    AND             shift and go to state 54
    OR              shift and go to state 61


state 71

    (30) if -> IF ( expression . ) { block }
    (31) if -> IF ( expression . ) { block } else
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    )               shift and go to state 93
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62
    AND             shift and go to state 54
    OR              shift and go to state 61


state 72

    (4) functions -> function functions .

    }               reduce using rule 4 (functions -> function functions .)


state 73

    (16) function -> FUNCTION VOID . ID ( ) { vars block }
    (17) function -> FUNCTION VOID . ID ( parameters_definition ) { vars block }

    ID              shift and go to state 94


state 74

    (14) function -> FUNCTION type . ID ( ) { vars block }
    (15) function -> FUNCTION type . ID ( parameters_definition ) { vars block }

    ID              shift and go to state 95


state 75

    (1) program -> PROGRAM { vars block functions } .

    $end            reduce using rule 1 (program -> PROGRAM { vars block functions } .)


state 76

    (52) expression -> ( expression ) .

    +               reduce using rule 52 (expression -> ( expression ) .)
    -               reduce using rule 52 (expression -> ( expression ) .)
    *               reduce using rule 52 (expression -> ( expression ) .)
    /               reduce using rule 52 (expression -> ( expression ) .)
    %               reduce using rule 52 (expression -> ( expression ) .)
    >               reduce using rule 52 (expression -> ( expression ) .)
    <               reduce using rule 52 (expression -> ( expression ) .)
    EQ              reduce using rule 52 (expression -> ( expression ) .)
    LESS_EQ         reduce using rule 52 (expression -> ( expression ) .)
    GREATER_EQ      reduce using rule 52 (expression -> ( expression ) .)
    AND             reduce using rule 52 (expression -> ( expression ) .)
    OR              reduce using rule 52 (expression -> ( expression ) .)
    BREAK           reduce using rule 52 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 52 (expression -> ( expression ) .)
    ID              reduce using rule 52 (expression -> ( expression ) .)
    IF              reduce using rule 52 (expression -> ( expression ) .)
    WHILE           reduce using rule 52 (expression -> ( expression ) .)
    RETURN          reduce using rule 52 (expression -> ( expression ) .)
    FUNCTION        reduce using rule 52 (expression -> ( expression ) .)
    }               reduce using rule 52 (expression -> ( expression ) .)
    )               reduce using rule 52 (expression -> ( expression ) .)
    ,               reduce using rule 52 (expression -> ( expression ) .)
    VAR             reduce using rule 52 (expression -> ( expression ) .)


state 77

    (49) expression -> expression AND expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    AND             reduce using rule 49 (expression -> expression AND expression .)
    OR              reduce using rule 49 (expression -> expression AND expression .)
    BREAK           reduce using rule 49 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 49 (expression -> expression AND expression .)
    ID              reduce using rule 49 (expression -> expression AND expression .)
    IF              reduce using rule 49 (expression -> expression AND expression .)
    WHILE           reduce using rule 49 (expression -> expression AND expression .)
    RETURN          reduce using rule 49 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 49 (expression -> expression AND expression .)
    }               reduce using rule 49 (expression -> expression AND expression .)
    )               reduce using rule 49 (expression -> expression AND expression .)
    ,               reduce using rule 49 (expression -> expression AND expression .)
    VAR             reduce using rule 49 (expression -> expression AND expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62

  ! +               [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! LESS_EQ         [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! GREATER_EQ      [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 78

    (47) expression -> expression LESS_EQ expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    >               reduce using rule 47 (expression -> expression LESS_EQ expression .)
    <               reduce using rule 47 (expression -> expression LESS_EQ expression .)
    EQ              reduce using rule 47 (expression -> expression LESS_EQ expression .)
    LESS_EQ         reduce using rule 47 (expression -> expression LESS_EQ expression .)
    GREATER_EQ      reduce using rule 47 (expression -> expression LESS_EQ expression .)
    AND             reduce using rule 47 (expression -> expression LESS_EQ expression .)
    OR              reduce using rule 47 (expression -> expression LESS_EQ expression .)
    BREAK           reduce using rule 47 (expression -> expression LESS_EQ expression .)
    CONTINUE        reduce using rule 47 (expression -> expression LESS_EQ expression .)
    ID              reduce using rule 47 (expression -> expression LESS_EQ expression .)
    IF              reduce using rule 47 (expression -> expression LESS_EQ expression .)
    WHILE           reduce using rule 47 (expression -> expression LESS_EQ expression .)
    RETURN          reduce using rule 47 (expression -> expression LESS_EQ expression .)
    FUNCTION        reduce using rule 47 (expression -> expression LESS_EQ expression .)
    }               reduce using rule 47 (expression -> expression LESS_EQ expression .)
    )               reduce using rule 47 (expression -> expression LESS_EQ expression .)
    ,               reduce using rule 47 (expression -> expression LESS_EQ expression .)
    VAR             reduce using rule 47 (expression -> expression LESS_EQ expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63

  ! +               [ reduce using rule 47 (expression -> expression LESS_EQ expression .) ]
  ! -               [ reduce using rule 47 (expression -> expression LESS_EQ expression .) ]
  ! *               [ reduce using rule 47 (expression -> expression LESS_EQ expression .) ]
  ! /               [ reduce using rule 47 (expression -> expression LESS_EQ expression .) ]
  ! %               [ reduce using rule 47 (expression -> expression LESS_EQ expression .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 79

    (46) expression -> expression EQ expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    >               reduce using rule 46 (expression -> expression EQ expression .)
    <               reduce using rule 46 (expression -> expression EQ expression .)
    EQ              reduce using rule 46 (expression -> expression EQ expression .)
    LESS_EQ         reduce using rule 46 (expression -> expression EQ expression .)
    GREATER_EQ      reduce using rule 46 (expression -> expression EQ expression .)
    AND             reduce using rule 46 (expression -> expression EQ expression .)
    OR              reduce using rule 46 (expression -> expression EQ expression .)
    BREAK           reduce using rule 46 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 46 (expression -> expression EQ expression .)
    ID              reduce using rule 46 (expression -> expression EQ expression .)
    IF              reduce using rule 46 (expression -> expression EQ expression .)
    WHILE           reduce using rule 46 (expression -> expression EQ expression .)
    RETURN          reduce using rule 46 (expression -> expression EQ expression .)
    FUNCTION        reduce using rule 46 (expression -> expression EQ expression .)
    }               reduce using rule 46 (expression -> expression EQ expression .)
    )               reduce using rule 46 (expression -> expression EQ expression .)
    ,               reduce using rule 46 (expression -> expression EQ expression .)
    VAR             reduce using rule 46 (expression -> expression EQ expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63

  ! +               [ reduce using rule 46 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 46 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 46 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 46 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 46 (expression -> expression EQ expression .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 80

    (39) expression -> expression + expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    +               reduce using rule 39 (expression -> expression + expression .)
    -               reduce using rule 39 (expression -> expression + expression .)
    >               reduce using rule 39 (expression -> expression + expression .)
    <               reduce using rule 39 (expression -> expression + expression .)
    EQ              reduce using rule 39 (expression -> expression + expression .)
    LESS_EQ         reduce using rule 39 (expression -> expression + expression .)
    GREATER_EQ      reduce using rule 39 (expression -> expression + expression .)
    AND             reduce using rule 39 (expression -> expression + expression .)
    OR              reduce using rule 39 (expression -> expression + expression .)
    BREAK           reduce using rule 39 (expression -> expression + expression .)
    CONTINUE        reduce using rule 39 (expression -> expression + expression .)
    ID              reduce using rule 39 (expression -> expression + expression .)
    IF              reduce using rule 39 (expression -> expression + expression .)
    WHILE           reduce using rule 39 (expression -> expression + expression .)
    RETURN          reduce using rule 39 (expression -> expression + expression .)
    FUNCTION        reduce using rule 39 (expression -> expression + expression .)
    }               reduce using rule 39 (expression -> expression + expression .)
    )               reduce using rule 39 (expression -> expression + expression .)
    ,               reduce using rule 39 (expression -> expression + expression .)
    VAR             reduce using rule 39 (expression -> expression + expression .)
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63

  ! *               [ reduce using rule 39 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 39 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 39 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 81

    (41) expression -> expression * expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    +               reduce using rule 41 (expression -> expression * expression .)
    -               reduce using rule 41 (expression -> expression * expression .)
    *               reduce using rule 41 (expression -> expression * expression .)
    /               reduce using rule 41 (expression -> expression * expression .)
    %               reduce using rule 41 (expression -> expression * expression .)
    >               reduce using rule 41 (expression -> expression * expression .)
    <               reduce using rule 41 (expression -> expression * expression .)
    EQ              reduce using rule 41 (expression -> expression * expression .)
    LESS_EQ         reduce using rule 41 (expression -> expression * expression .)
    GREATER_EQ      reduce using rule 41 (expression -> expression * expression .)
    AND             reduce using rule 41 (expression -> expression * expression .)
    OR              reduce using rule 41 (expression -> expression * expression .)
    BREAK           reduce using rule 41 (expression -> expression * expression .)
    CONTINUE        reduce using rule 41 (expression -> expression * expression .)
    ID              reduce using rule 41 (expression -> expression * expression .)
    IF              reduce using rule 41 (expression -> expression * expression .)
    WHILE           reduce using rule 41 (expression -> expression * expression .)
    RETURN          reduce using rule 41 (expression -> expression * expression .)
    FUNCTION        reduce using rule 41 (expression -> expression * expression .)
    }               reduce using rule 41 (expression -> expression * expression .)
    )               reduce using rule 41 (expression -> expression * expression .)
    ,               reduce using rule 41 (expression -> expression * expression .)
    VAR             reduce using rule 41 (expression -> expression * expression .)

  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 63 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 82

    (40) expression -> expression - expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    +               reduce using rule 40 (expression -> expression - expression .)
    -               reduce using rule 40 (expression -> expression - expression .)
    >               reduce using rule 40 (expression -> expression - expression .)
    <               reduce using rule 40 (expression -> expression - expression .)
    EQ              reduce using rule 40 (expression -> expression - expression .)
    LESS_EQ         reduce using rule 40 (expression -> expression - expression .)
    GREATER_EQ      reduce using rule 40 (expression -> expression - expression .)
    AND             reduce using rule 40 (expression -> expression - expression .)
    OR              reduce using rule 40 (expression -> expression - expression .)
    BREAK           reduce using rule 40 (expression -> expression - expression .)
    CONTINUE        reduce using rule 40 (expression -> expression - expression .)
    ID              reduce using rule 40 (expression -> expression - expression .)
    IF              reduce using rule 40 (expression -> expression - expression .)
    WHILE           reduce using rule 40 (expression -> expression - expression .)
    RETURN          reduce using rule 40 (expression -> expression - expression .)
    FUNCTION        reduce using rule 40 (expression -> expression - expression .)
    }               reduce using rule 40 (expression -> expression - expression .)
    )               reduce using rule 40 (expression -> expression - expression .)
    ,               reduce using rule 40 (expression -> expression - expression .)
    VAR             reduce using rule 40 (expression -> expression - expression .)
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63

  ! *               [ reduce using rule 40 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 40 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 40 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 83

    (42) expression -> expression / expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    +               reduce using rule 42 (expression -> expression / expression .)
    -               reduce using rule 42 (expression -> expression / expression .)
    *               reduce using rule 42 (expression -> expression / expression .)
    /               reduce using rule 42 (expression -> expression / expression .)
    %               reduce using rule 42 (expression -> expression / expression .)
    >               reduce using rule 42 (expression -> expression / expression .)
    <               reduce using rule 42 (expression -> expression / expression .)
    EQ              reduce using rule 42 (expression -> expression / expression .)
    LESS_EQ         reduce using rule 42 (expression -> expression / expression .)
    GREATER_EQ      reduce using rule 42 (expression -> expression / expression .)
    AND             reduce using rule 42 (expression -> expression / expression .)
    OR              reduce using rule 42 (expression -> expression / expression .)
    BREAK           reduce using rule 42 (expression -> expression / expression .)
    CONTINUE        reduce using rule 42 (expression -> expression / expression .)
    ID              reduce using rule 42 (expression -> expression / expression .)
    IF              reduce using rule 42 (expression -> expression / expression .)
    WHILE           reduce using rule 42 (expression -> expression / expression .)
    RETURN          reduce using rule 42 (expression -> expression / expression .)
    FUNCTION        reduce using rule 42 (expression -> expression / expression .)
    }               reduce using rule 42 (expression -> expression / expression .)
    )               reduce using rule 42 (expression -> expression / expression .)
    ,               reduce using rule 42 (expression -> expression / expression .)
    VAR             reduce using rule 42 (expression -> expression / expression .)

  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 63 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 84

    (50) expression -> expression OR expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    AND             reduce using rule 50 (expression -> expression OR expression .)
    OR              reduce using rule 50 (expression -> expression OR expression .)
    BREAK           reduce using rule 50 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 50 (expression -> expression OR expression .)
    ID              reduce using rule 50 (expression -> expression OR expression .)
    IF              reduce using rule 50 (expression -> expression OR expression .)
    WHILE           reduce using rule 50 (expression -> expression OR expression .)
    RETURN          reduce using rule 50 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 50 (expression -> expression OR expression .)
    }               reduce using rule 50 (expression -> expression OR expression .)
    )               reduce using rule 50 (expression -> expression OR expression .)
    ,               reduce using rule 50 (expression -> expression OR expression .)
    VAR             reduce using rule 50 (expression -> expression OR expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63
    >               shift and go to state 65
    <               shift and go to state 64
    EQ              shift and go to state 56
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 62

  ! +               [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! LESS_EQ         [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! GREATER_EQ      [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 85

    (48) expression -> expression GREATER_EQ expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    >               reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    <               reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    EQ              reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    LESS_EQ         reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    GREATER_EQ      reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    AND             reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    OR              reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    BREAK           reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    CONTINUE        reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    ID              reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    IF              reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    WHILE           reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    RETURN          reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    FUNCTION        reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    }               reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    )               reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    ,               reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    VAR             reduce using rule 48 (expression -> expression GREATER_EQ expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63

  ! +               [ reduce using rule 48 (expression -> expression GREATER_EQ expression .) ]
  ! -               [ reduce using rule 48 (expression -> expression GREATER_EQ expression .) ]
  ! *               [ reduce using rule 48 (expression -> expression GREATER_EQ expression .) ]
  ! /               [ reduce using rule 48 (expression -> expression GREATER_EQ expression .) ]
  ! %               [ reduce using rule 48 (expression -> expression GREATER_EQ expression .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 86

    (43) expression -> expression % expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    +               reduce using rule 43 (expression -> expression % expression .)
    -               reduce using rule 43 (expression -> expression % expression .)
    *               reduce using rule 43 (expression -> expression % expression .)
    /               reduce using rule 43 (expression -> expression % expression .)
    %               reduce using rule 43 (expression -> expression % expression .)
    >               reduce using rule 43 (expression -> expression % expression .)
    <               reduce using rule 43 (expression -> expression % expression .)
    EQ              reduce using rule 43 (expression -> expression % expression .)
    LESS_EQ         reduce using rule 43 (expression -> expression % expression .)
    GREATER_EQ      reduce using rule 43 (expression -> expression % expression .)
    AND             reduce using rule 43 (expression -> expression % expression .)
    OR              reduce using rule 43 (expression -> expression % expression .)
    BREAK           reduce using rule 43 (expression -> expression % expression .)
    CONTINUE        reduce using rule 43 (expression -> expression % expression .)
    ID              reduce using rule 43 (expression -> expression % expression .)
    IF              reduce using rule 43 (expression -> expression % expression .)
    WHILE           reduce using rule 43 (expression -> expression % expression .)
    RETURN          reduce using rule 43 (expression -> expression % expression .)
    FUNCTION        reduce using rule 43 (expression -> expression % expression .)
    }               reduce using rule 43 (expression -> expression % expression .)
    )               reduce using rule 43 (expression -> expression % expression .)
    ,               reduce using rule 43 (expression -> expression % expression .)
    VAR             reduce using rule 43 (expression -> expression % expression .)

  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 63 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 87

    (45) expression -> expression < expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    >               reduce using rule 45 (expression -> expression < expression .)
    <               reduce using rule 45 (expression -> expression < expression .)
    EQ              reduce using rule 45 (expression -> expression < expression .)
    LESS_EQ         reduce using rule 45 (expression -> expression < expression .)
    GREATER_EQ      reduce using rule 45 (expression -> expression < expression .)
    AND             reduce using rule 45 (expression -> expression < expression .)
    OR              reduce using rule 45 (expression -> expression < expression .)
    BREAK           reduce using rule 45 (expression -> expression < expression .)
    CONTINUE        reduce using rule 45 (expression -> expression < expression .)
    ID              reduce using rule 45 (expression -> expression < expression .)
    IF              reduce using rule 45 (expression -> expression < expression .)
    WHILE           reduce using rule 45 (expression -> expression < expression .)
    RETURN          reduce using rule 45 (expression -> expression < expression .)
    FUNCTION        reduce using rule 45 (expression -> expression < expression .)
    }               reduce using rule 45 (expression -> expression < expression .)
    )               reduce using rule 45 (expression -> expression < expression .)
    ,               reduce using rule 45 (expression -> expression < expression .)
    VAR             reduce using rule 45 (expression -> expression < expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63

  ! +               [ reduce using rule 45 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 45 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 45 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 45 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 45 (expression -> expression < expression .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 88

    (44) expression -> expression > expression .
    (39) expression -> expression . + expression
    (40) expression -> expression . - expression
    (41) expression -> expression . * expression
    (42) expression -> expression . / expression
    (43) expression -> expression . % expression
    (44) expression -> expression . > expression
    (45) expression -> expression . < expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LESS_EQ expression
    (48) expression -> expression . GREATER_EQ expression
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression

    >               reduce using rule 44 (expression -> expression > expression .)
    <               reduce using rule 44 (expression -> expression > expression .)
    EQ              reduce using rule 44 (expression -> expression > expression .)
    LESS_EQ         reduce using rule 44 (expression -> expression > expression .)
    GREATER_EQ      reduce using rule 44 (expression -> expression > expression .)
    AND             reduce using rule 44 (expression -> expression > expression .)
    OR              reduce using rule 44 (expression -> expression > expression .)
    BREAK           reduce using rule 44 (expression -> expression > expression .)
    CONTINUE        reduce using rule 44 (expression -> expression > expression .)
    ID              reduce using rule 44 (expression -> expression > expression .)
    IF              reduce using rule 44 (expression -> expression > expression .)
    WHILE           reduce using rule 44 (expression -> expression > expression .)
    RETURN          reduce using rule 44 (expression -> expression > expression .)
    FUNCTION        reduce using rule 44 (expression -> expression > expression .)
    }               reduce using rule 44 (expression -> expression > expression .)
    )               reduce using rule 44 (expression -> expression > expression .)
    ,               reduce using rule 44 (expression -> expression > expression .)
    VAR             reduce using rule 44 (expression -> expression > expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 63

  ! +               [ reduce using rule 44 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 44 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 44 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 44 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 44 (expression -> expression > expression .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 56 ]
  ! LESS_EQ         [ shift and go to state 55 ]
  ! GREATER_EQ      [ shift and go to state 62 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 89

    (34) cycle -> WHILE ( expression ) . { block }

    {               shift and go to state 96


state 90

    (38) function_call -> ID ( parameters ) .

    BREAK           reduce using rule 38 (function_call -> ID ( parameters ) .)
    CONTINUE        reduce using rule 38 (function_call -> ID ( parameters ) .)
    ID              reduce using rule 38 (function_call -> ID ( parameters ) .)
    IF              reduce using rule 38 (function_call -> ID ( parameters ) .)
    WHILE           reduce using rule 38 (function_call -> ID ( parameters ) .)
    RETURN          reduce using rule 38 (function_call -> ID ( parameters ) .)
    FUNCTION        reduce using rule 38 (function_call -> ID ( parameters ) .)
    }               reduce using rule 38 (function_call -> ID ( parameters ) .)


state 91

    (19) parameters -> expression , . parameters
    (18) parameters -> . expression
    (19) parameters -> . expression , parameters
    (39) expression -> . expression + expression
    (40) expression -> . expression - expression
    (41) expression -> . expression * expression
    (42) expression -> . expression / expression
    (43) expression -> . expression % expression
    (44) expression -> . expression > expression
    (45) expression -> . expression < expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LESS_EQ expression
    (48) expression -> . expression GREATER_EQ expression
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . - expression
    (52) expression -> . ( expression )
    (53) expression -> . NUMBER
    (54) expression -> . FALSE
    (55) expression -> . TRUE
    (56) expression -> . ID

    -               shift and go to state 28
    (               shift and go to state 31
    NUMBER          shift and go to state 29
    FALSE           shift and go to state 34
    TRUE            shift and go to state 30
    ID              shift and go to state 32

    expression                     shift and go to state 69
    parameters                     shift and go to state 97

state 92

    (12) assignment -> ID = expression , . assignment
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression

    ID              shift and go to state 51

    assignment                     shift and go to state 98

state 93

    (30) if -> IF ( expression ) . { block }
    (31) if -> IF ( expression ) . { block } else

    {               shift and go to state 99


state 94

    (16) function -> FUNCTION VOID ID . ( ) { vars block }
    (17) function -> FUNCTION VOID ID . ( parameters_definition ) { vars block }

    (               shift and go to state 100


state 95

    (14) function -> FUNCTION type ID . ( ) { vars block }
    (15) function -> FUNCTION type ID . ( parameters_definition ) { vars block }

    (               shift and go to state 101


state 96

    (34) cycle -> WHILE ( expression ) { . block }
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 102
    cycle                          shift and go to state 12

state 97

    (19) parameters -> expression , parameters .

    )               reduce using rule 19 (parameters -> expression , parameters .)


state 98

    (12) assignment -> ID = expression , assignment .

    BREAK           reduce using rule 12 (assignment -> ID = expression , assignment .)
    CONTINUE        reduce using rule 12 (assignment -> ID = expression , assignment .)
    ID              reduce using rule 12 (assignment -> ID = expression , assignment .)
    IF              reduce using rule 12 (assignment -> ID = expression , assignment .)
    WHILE           reduce using rule 12 (assignment -> ID = expression , assignment .)
    RETURN          reduce using rule 12 (assignment -> ID = expression , assignment .)
    FUNCTION        reduce using rule 12 (assignment -> ID = expression , assignment .)
    }               reduce using rule 12 (assignment -> ID = expression , assignment .)
    VAR             reduce using rule 12 (assignment -> ID = expression , assignment .)


state 99

    (30) if -> IF ( expression ) { . block }
    (31) if -> IF ( expression ) { . block } else
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 103
    cycle                          shift and go to state 12

state 100

    (16) function -> FUNCTION VOID ID ( . ) { vars block }
    (17) function -> FUNCTION VOID ID ( . parameters_definition ) { vars block }
    (20) parameters_definition -> . type
    (21) parameters_definition -> . type , parameters_definition
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . CHAR
    (10) type -> . BOOL
    (11) type -> . STRING

    )               shift and go to state 105
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 21

    parameters_definition          shift and go to state 106
    type                           shift and go to state 104

state 101

    (14) function -> FUNCTION type ID ( . ) { vars block }
    (15) function -> FUNCTION type ID ( . parameters_definition ) { vars block }
    (20) parameters_definition -> . type
    (21) parameters_definition -> . type , parameters_definition
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . CHAR
    (10) type -> . BOOL
    (11) type -> . STRING

    )               shift and go to state 107
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 21

    parameters_definition          shift and go to state 108
    type                           shift and go to state 104

state 102

    (34) cycle -> WHILE ( expression ) { block . }

    }               shift and go to state 109


state 103

    (30) if -> IF ( expression ) { block . }
    (31) if -> IF ( expression ) { block . } else

    }               shift and go to state 110


state 104

    (20) parameters_definition -> type .
    (21) parameters_definition -> type . , parameters_definition

    )               reduce using rule 20 (parameters_definition -> type .)
    ,               shift and go to state 111


state 105

    (16) function -> FUNCTION VOID ID ( ) . { vars block }

    {               shift and go to state 112


state 106

    (17) function -> FUNCTION VOID ID ( parameters_definition . ) { vars block }

    )               shift and go to state 113


state 107

    (14) function -> FUNCTION type ID ( ) . { vars block }

    {               shift and go to state 114


state 108

    (15) function -> FUNCTION type ID ( parameters_definition . ) { vars block }

    )               shift and go to state 115


state 109

    (34) cycle -> WHILE ( expression ) { block } .

    BREAK           reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)
    CONTINUE        reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)
    ID              reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)
    IF              reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)
    WHILE           reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)
    RETURN          reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)
    FUNCTION        reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)
    }               reduce using rule 34 (cycle -> WHILE ( expression ) { block } .)


state 110

    (30) if -> IF ( expression ) { block } .
    (31) if -> IF ( expression ) { block } . else
    (32) else -> . ELSE if
    (33) else -> . ELSE { block }

    BREAK           reduce using rule 30 (if -> IF ( expression ) { block } .)
    CONTINUE        reduce using rule 30 (if -> IF ( expression ) { block } .)
    ID              reduce using rule 30 (if -> IF ( expression ) { block } .)
    IF              reduce using rule 30 (if -> IF ( expression ) { block } .)
    WHILE           reduce using rule 30 (if -> IF ( expression ) { block } .)
    RETURN          reduce using rule 30 (if -> IF ( expression ) { block } .)
    }               reduce using rule 30 (if -> IF ( expression ) { block } .)
    FUNCTION        reduce using rule 30 (if -> IF ( expression ) { block } .)
    ELSE            shift and go to state 117

    else                           shift and go to state 116

state 111

    (21) parameters_definition -> type , . parameters_definition
    (20) parameters_definition -> . type
    (21) parameters_definition -> . type , parameters_definition
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . CHAR
    (10) type -> . BOOL
    (11) type -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 21

    parameters_definition          shift and go to state 118
    type                           shift and go to state 104

state 112

    (16) function -> FUNCTION VOID ID ( ) { . vars block }
    (2) vars -> . var vars
    (3) vars -> . empty
    (6) var -> . VAR type assignment
    (57) empty -> .

    VAR             shift and go to state 5
    BREAK           reduce using rule 57 (empty -> .)
    CONTINUE        reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    IF              reduce using rule 57 (empty -> .)
    WHILE           reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    vars                           shift and go to state 119
    var                            shift and go to state 7
    empty                          shift and go to state 6

state 113

    (17) function -> FUNCTION VOID ID ( parameters_definition ) . { vars block }

    {               shift and go to state 120


state 114

    (14) function -> FUNCTION type ID ( ) { . vars block }
    (2) vars -> . var vars
    (3) vars -> . empty
    (6) var -> . VAR type assignment
    (57) empty -> .

    VAR             shift and go to state 5
    BREAK           reduce using rule 57 (empty -> .)
    CONTINUE        reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    IF              reduce using rule 57 (empty -> .)
    WHILE           reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    vars                           shift and go to state 121
    var                            shift and go to state 7
    empty                          shift and go to state 6

state 115

    (15) function -> FUNCTION type ID ( parameters_definition ) . { vars block }

    {               shift and go to state 122


state 116

    (31) if -> IF ( expression ) { block } else .

    BREAK           reduce using rule 31 (if -> IF ( expression ) { block } else .)
    CONTINUE        reduce using rule 31 (if -> IF ( expression ) { block } else .)
    ID              reduce using rule 31 (if -> IF ( expression ) { block } else .)
    IF              reduce using rule 31 (if -> IF ( expression ) { block } else .)
    WHILE           reduce using rule 31 (if -> IF ( expression ) { block } else .)
    RETURN          reduce using rule 31 (if -> IF ( expression ) { block } else .)
    }               reduce using rule 31 (if -> IF ( expression ) { block } else .)
    FUNCTION        reduce using rule 31 (if -> IF ( expression ) { block } else .)


state 117

    (32) else -> ELSE . if
    (33) else -> ELSE . { block }
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else

    {               shift and go to state 123
    IF              shift and go to state 17

    if                             shift and go to state 124

state 118

    (21) parameters_definition -> type , parameters_definition .

    )               reduce using rule 21 (parameters_definition -> type , parameters_definition .)


state 119

    (16) function -> FUNCTION VOID ID ( ) { vars . block }
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 125
    cycle                          shift and go to state 12

state 120

    (17) function -> FUNCTION VOID ID ( parameters_definition ) { . vars block }
    (2) vars -> . var vars
    (3) vars -> . empty
    (6) var -> . VAR type assignment
    (57) empty -> .

    VAR             shift and go to state 5
    BREAK           reduce using rule 57 (empty -> .)
    CONTINUE        reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    IF              reduce using rule 57 (empty -> .)
    WHILE           reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    vars                           shift and go to state 126
    var                            shift and go to state 7
    empty                          shift and go to state 6

state 121

    (14) function -> FUNCTION type ID ( ) { vars . block }
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 127
    cycle                          shift and go to state 12

state 122

    (15) function -> FUNCTION type ID ( parameters_definition ) { . vars block }
    (2) vars -> . var vars
    (3) vars -> . empty
    (6) var -> . VAR type assignment
    (57) empty -> .

    VAR             shift and go to state 5
    BREAK           reduce using rule 57 (empty -> .)
    CONTINUE        reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    IF              reduce using rule 57 (empty -> .)
    WHILE           reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    }               reduce using rule 57 (empty -> .)

    vars                           shift and go to state 128
    var                            shift and go to state 7
    empty                          shift and go to state 6

state 123

    (33) else -> ELSE { . block }
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    assignment                     shift and go to state 15
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    if                             shift and go to state 11
    block                          shift and go to state 129
    cycle                          shift and go to state 12

state 124

    (32) else -> ELSE if .

    BREAK           reduce using rule 32 (else -> ELSE if .)
    CONTINUE        reduce using rule 32 (else -> ELSE if .)
    ID              reduce using rule 32 (else -> ELSE if .)
    IF              reduce using rule 32 (else -> ELSE if .)
    WHILE           reduce using rule 32 (else -> ELSE if .)
    RETURN          reduce using rule 32 (else -> ELSE if .)
    FUNCTION        reduce using rule 32 (else -> ELSE if .)
    }               reduce using rule 32 (else -> ELSE if .)


state 125

    (16) function -> FUNCTION VOID ID ( ) { vars block . }

    }               shift and go to state 130


state 126

    (17) function -> FUNCTION VOID ID ( parameters_definition ) { vars . block }
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    assignment                     shift and go to state 15
    if                             shift and go to state 11
    block                          shift and go to state 131
    cycle                          shift and go to state 12

state 127

    (14) function -> FUNCTION type ID ( ) { vars block . }

    }               shift and go to state 132


state 128

    (15) function -> FUNCTION type ID ( parameters_definition ) { vars . block }
    (22) block -> . assignment block
    (23) block -> . if block
    (24) block -> . cycle block
    (25) block -> . return block
    (26) block -> . BREAK block
    (27) block -> . CONTINUE block
    (28) block -> . function_call block
    (29) block -> . empty
    (12) assignment -> . ID = expression , assignment
    (13) assignment -> . ID = expression
    (30) if -> . IF ( expression ) { block }
    (31) if -> . IF ( expression ) { block } else
    (34) cycle -> . WHILE ( expression ) { block }
    (35) return -> . RETURN
    (36) return -> . RETURN expression
    (37) function_call -> . ID ( )
    (38) function_call -> . ID ( parameters )
    (57) empty -> .

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 10
    RETURN          shift and go to state 8
    }               reduce using rule 57 (empty -> .)

    return                         shift and go to state 14
    function_call                  shift and go to state 9
    empty                          shift and go to state 13
    assignment                     shift and go to state 15
    cycle                          shift and go to state 12
    block                          shift and go to state 133
    if                             shift and go to state 11

state 129

    (33) else -> ELSE { block . }

    }               shift and go to state 134


state 130

    (16) function -> FUNCTION VOID ID ( ) { vars block } .

    FUNCTION        reduce using rule 16 (function -> FUNCTION VOID ID ( ) { vars block } .)
    }               reduce using rule 16 (function -> FUNCTION VOID ID ( ) { vars block } .)


state 131

    (17) function -> FUNCTION VOID ID ( parameters_definition ) { vars block . }

    }               shift and go to state 135


state 132

    (14) function -> FUNCTION type ID ( ) { vars block } .

    FUNCTION        reduce using rule 14 (function -> FUNCTION type ID ( ) { vars block } .)
    }               reduce using rule 14 (function -> FUNCTION type ID ( ) { vars block } .)


state 133

    (15) function -> FUNCTION type ID ( parameters_definition ) { vars block . }

    }               shift and go to state 136


state 134

    (33) else -> ELSE { block } .

    BREAK           reduce using rule 33 (else -> ELSE { block } .)
    CONTINUE        reduce using rule 33 (else -> ELSE { block } .)
    ID              reduce using rule 33 (else -> ELSE { block } .)
    IF              reduce using rule 33 (else -> ELSE { block } .)
    WHILE           reduce using rule 33 (else -> ELSE { block } .)
    RETURN          reduce using rule 33 (else -> ELSE { block } .)
    FUNCTION        reduce using rule 33 (else -> ELSE { block } .)
    }               reduce using rule 33 (else -> ELSE { block } .)


state 135

    (17) function -> FUNCTION VOID ID ( parameters_definition ) { vars block } .

    FUNCTION        reduce using rule 17 (function -> FUNCTION VOID ID ( parameters_definition ) { vars block } .)
    }               reduce using rule 17 (function -> FUNCTION VOID ID ( parameters_definition ) { vars block } .)


state 136

    (15) function -> FUNCTION type ID ( parameters_definition ) { vars block } .

    FUNCTION        reduce using rule 15 (function -> FUNCTION type ID ( parameters_definition ) { vars block } .)
    }               reduce using rule 15 (function -> FUNCTION type ID ( parameters_definition ) { vars block } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 8 resolved as shift
